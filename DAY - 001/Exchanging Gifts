Problem Statement
The royal family exchanges gifts at Christmas, where the youngest member receives gifts from everyone but doesn't give any gifts. Given the data for all the exchanged gifts among the family members, you need to identify the youngest member, who is the one receiving gifts from everyone but not giving any.

Note: A family member does not give more than one gift to the same member.

Input Format
The first line of the input contains two integers n and m denoting the number of family members and the number of gifts that were exchanged.

The next m lines contain two integers each. In the ith line, two integers ai, bi represent that a gift was given by ai to bi.

Output Format
Print a single integer, the number that represents the youngest member of the family.

If no such member is found, print “-1” instead.

Constraints
1 <= n <= 104

0 <= m <= 105

1 <= ai, bi, <= n

Sample Testcase 0
Testcase Input
2 1
1 2
Testcase Output
2
Explanation
Family member 1 gave a gift to family member 2. Now, we can see that 2 did not give any gift to anyone but received a gift from all other members (member 1). Hence, 2 is the youngest member.
Sample Testcase 1
Testcase Input
3 2
1 3
2 3
Testcase Output
3
Explanation
We can see that 3 received gifts from 1 and 2 but did not give any gifts to anyone. Therefore, 3 must be the youngest member.

OUTPUT:-

def find_youngest_member(n, m, gifts):
    """
    Write your logic here.
    Parameters:
        n (int): Number of family members
        m (int): Number of gifts exchanged
        gifts (list of tuples): List of tuples where each tuple contains two integers (a_i, b_i)
    Returns:
        int: The number that represents the youngest member of the family or -1 if no such member is found
    """
    give = [0] * (n + 1)
    receive = [0] * (n + 1)
    
    for gift in gifts:
        give[gift[0]] += 1
        receive[gift[1]] += 1
    
    for i in range(1, n + 1):
        if receive[i] == n - 1 and give[i] == 0:
            return i
    
    return -1



def main():
    import sys
    input = sys.stdin.read
    data = input().strip().split()
    
    n = int(data[0])  # Number of family members
    m = int(data[1])  # Number of gifts exchanged
    
    gifts = []
    index = 2
    for _ in range(m):
        a_i = int(data[index])
        b_i = int(data[index + 1])
        gifts.append((a_i, b_i))
        index += 2
    
    # Call user logic function and print the output
    result = find_youngest_member(n, m, gifts)
    print(result)

if __name__ == "__main__":
    main()

EXPLAINATION:-
1. We create two lists, give and receive, of size n + 1 to keep track of the number of gifts each member gives and receives, respectively.
2. We iterate through the gifts and update the give and receive lists accordingly.
3. We then iterate through the members and check if any member receives gifts from all other members (receive[i] == n - 1) and does not give any gifts (give[i] == 0). If such a member is found, we return their index.
4. If no such member is found, we return -1.
